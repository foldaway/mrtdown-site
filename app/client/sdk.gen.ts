// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from './client';
import type { GetOverviewData, GetOverviewResponses, GetAnalyticsData, GetAnalyticsResponses, GetLinesData, GetLinesResponses, GetLinesLineIdProfileData, GetLinesLineIdProfileResponses, GetLinesLineIdProfileErrors, GetIssuesData, GetIssuesResponses, GetIssuesHistoryYearData, GetIssuesHistoryYearResponses, GetIssuesHistoryYearSummaryData, GetIssuesHistoryYearSummaryResponses, GetIssuesHistoryYearMonthData, GetIssuesHistoryYearMonthResponses, GetIssuesIssueIdData, GetIssuesIssueIdResponses, GetIssuesIssueIdErrors, GetStationsData, GetStationsResponses, GetStationsErrors, GetStationsStationIdProfileData, GetStationsStationIdProfileResponses, GetStationsStationIdProfileErrors, GetMetadataData, GetMetadataResponses, GetMetadataErrors } from './types.gen';
import { client as _heyApiClient } from './client.gen';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Overview endpoint
 */
export const getOverview = <ThrowOnError extends boolean = false>(options?: Options<GetOverviewData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetOverviewResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/overview',
        ...options
    });
};

/**
 * Get an overview of the analytics data.
 */
export const getAnalytics = <ThrowOnError extends boolean = false>(options?: Options<GetAnalyticsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetAnalyticsResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/analytics',
        ...options
    });
};

/**
 * Get all lines
 */
export const getLines = <ThrowOnError extends boolean = false>(options?: Options<GetLinesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetLinesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lines',
        ...options
    });
};

/**
 * Get the profile of a line
 */
export const getLinesLineIdProfile = <ThrowOnError extends boolean = false>(options: Options<GetLinesLineIdProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetLinesLineIdProfileResponses, GetLinesLineIdProfileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/lines/{lineId}/profile',
        ...options
    });
};

/**
 * Get all issues
 */
export const getIssues = <ThrowOnError extends boolean = false>(options?: Options<GetIssuesData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetIssuesResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issues',
        ...options
    });
};

/**
 * Get issues for a specific year
 */
export const getIssuesHistoryYear = <ThrowOnError extends boolean = false>(options: Options<GetIssuesHistoryYearData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIssuesHistoryYearResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issues/history/{year}',
        ...options
    });
};

/**
 * Get issue count summary by type for each month in the year
 */
export const getIssuesHistoryYearSummary = <ThrowOnError extends boolean = false>(options: Options<GetIssuesHistoryYearSummaryData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIssuesHistoryYearSummaryResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issues/history/{year}/summary',
        ...options
    });
};

/**
 * Get issues for a specific month
 */
export const getIssuesHistoryYearMonth = <ThrowOnError extends boolean = false>(options: Options<GetIssuesHistoryYearMonthData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIssuesHistoryYearMonthResponses, unknown, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issues/history/{year}/{month}',
        ...options
    });
};

/**
 * Get issue details
 */
export const getIssuesIssueId = <ThrowOnError extends boolean = false>(options: Options<GetIssuesIssueIdData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetIssuesIssueIdResponses, GetIssuesIssueIdErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/issues/{issueId}',
        ...options
    });
};

/**
 * Get all stations
 */
export const getStations = <ThrowOnError extends boolean = false>(options?: Options<GetStationsData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetStationsResponses, GetStationsErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/stations',
        ...options
    });
};

/**
 * Get Station Profile
 */
export const getStationsStationIdProfile = <ThrowOnError extends boolean = false>(options: Options<GetStationsStationIdProfileData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).get<GetStationsStationIdProfileResponses, GetStationsStationIdProfileErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/stations/{stationId}/profile',
        ...options
    });
};

/**
 * Get metadata
 */
export const getMetadata = <ThrowOnError extends boolean = false>(options?: Options<GetMetadataData, ThrowOnError>) => {
    return (options?.client ?? _heyApiClient).get<GetMetadataResponses, GetMetadataErrors, ThrowOnError>({
        security: [
            {
                scheme: 'bearer',
                type: 'http'
            }
        ],
        url: '/metadata',
        ...options
    });
};