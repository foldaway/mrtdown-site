// This file is auto-generated by @hey-api/openapi-ts

/**
 * The type of a line.
 */
export type LineType = 'mrt.high' | 'mrt.medium' | 'lrt';

/**
 * Represents a line in the network.
 */
export type Line = {
    id: string;
    title: string;
    titleTranslations: {
        [key: string]: string;
    };
    type: LineType;
    color: string;
    startedAt: string | null;
    operatingHours: {
        weekdays: {
            start: string;
            end: string;
        };
        weekends: {
            start: string;
            end: string;
        };
    };
};

/**
 * Structure type of the station
 */
export type StationComponentMemberStructureType = 'elevated' | 'underground' | 'at_grade' | 'in_building';

/**
 * Describes the membership of a station in a specific line, including its code, start and end dates, and structure type.
 */
export type StationLineMembership = {
    /**
     * ID of the line to which the station belongs
     */
    lineId: string;
    /**
     * ID of the branch
     */
    branchId: string;
    /**
     * Code of the station
     */
    code: string;
    /**
     * Date when the station was added to the line
     */
    startedAt: string;
    /**
     * Date when the station was removed from the line, if applicable
     */
    endedAt?: string;
    structureType: StationComponentMemberStructureType;
    /**
     * Order of the station in the branch sequence
     */
    sequenceOrder: number;
};

/**
 * A station in the network, identified by its unique ID.
 */
export type Station = {
    id: string;
    name: string;
    nameTranslations: {
        [key: string]: string;
    };
    geo: {
        /**
         * Latitude of the station
         */
        latitude: number;
        /**
         * Longitude of the station
         */
        longitude: number;
    };
    /**
     * List of line memberships for the station
     */
    memberships: Array<StationLineMembership>;
    /**
     * ID of the town where the station is located
     */
    townId: string;
    /**
     * List of landmark IDs near the station
     */
    landmarkIds: Array<string>;
};

/**
 * The type of the issue.
 */
export type IssueType = 'disruption' | 'maintenance' | 'infra';

/**
 * The subtype of the issue, providing more specific categorization based on the issue type.
 */
export type IssueSubtype = ('signal.fault' | 'track.fault' | 'train.fault' | 'power.fault' | 'station.fault' | 'security' | 'weather' | 'passenger.incident' | 'platform_door.fault' | 'delay') | ('track.work' | 'system.upgrade') | ('elevator.outage' | 'escalator.outage' | 'air_conditioning.issue' | 'station.renovation');

/**
 * A branch of a line affected by the issue, including the stations impacted.
 */
export type IssueAffectedBranch = {
    lineId: string;
    branchId: string;
    stationIds: Array<string>;
};

/**
 * The status of the issue interval, indicating whether it is currently ongoing, has ended, or is upcoming.
 */
export type IssueIntervalStatus = 'ongoing' | 'ended' | 'future';

export type IssueInterval = {
    startAt: string;
    endAt: string | null;
    status: IssueIntervalStatus;
};

export type Issue = {
    id: string;
    title: string;
    titleTranslations: {
        [key: string]: string;
    };
    type: IssueType;
    /**
     * Subtypes providing more specific categorization of the issue.
     */
    subtypes: Array<IssueSubtype>;
    durationSeconds: number;
    /**
     * IDs of lines affected by the issue.
     */
    lineIds: Array<string>;
    /**
     * Branches of lines affected by the issue, including stations impacted.
     */
    branchesAffected: Array<IssueAffectedBranch>;
    intervals: Array<IssueInterval>;
};

/**
 * A notable landmark near a station.
 */
export type Landmark = {
    id: string;
    name: string;
    nameTranslations: {
        [key: string]: string;
    };
};

/**
 * A town or city where stations are located.
 */
export type Town = {
    id: string;
    name: string;
    nameTranslations: {
        [key: string]: string;
    };
};

/**
 * Included entities that are referenced in the response.
 */
export type IncludedEntities = {
    lines: {
        [key: string]: Line;
    };
    stations: {
        [key: string]: Station;
    };
    issues: {
        [key: string]: Issue;
    };
    landmarks: {
        [key: string]: Landmark;
    };
    towns: {
        [key: string]: Town;
    };
};

/**
 * Status of the line summary, indicating the current operational state.
 */
export type LineSummaryStatus = 'future_service' | 'closed_for_day' | 'ongoing_disruption' | 'ongoing_maintenance' | 'ongoing_infra' | 'normal';

/**
 * Details of issues for a specific date and issue type.
 */
export type LineSummaryDateRecordIssueTypeEntry = {
    totalDurationSeconds: number;
    /**
     * List of issue IDs for this issue type on this date.
     */
    issueIds: Array<string>;
};

/**
 * Type of day for the breakdown.
 */
export type LineSummaryDayType = 'weekday' | 'weekend' | 'public_holiday';

/**
 * Breakdown of issues by date for a line summary.
 */
export type LineSummaryDateRecord = {
    breakdownByIssueTypes: {
        [key in IssueType]?: LineSummaryDateRecordIssueTypeEntry;
    };
    dayType: LineSummaryDayType;
};

/**
 * Summary of the status and issues for a specific line.
 */
export type LineSummary = {
    lineId: string;
    status: LineSummaryStatus;
    /**
     * Total duration in seconds for each issue type affecting this line.
     */
    durationSecondsByIssueType: {
        [key in IssueType]?: number;
    };
    /**
     * Total duration in seconds for all issues affecting this line.
     */
    durationSecondsTotalForIssues: number;
    /**
     * Breakdown of issues by date for this line.
     */
    breakdownByDates: {
        [key: string]: LineSummaryDateRecord;
    };
    uptimeRatio: number | null;
    totalServiceSeconds: number | null;
    totalDowntimeSeconds: number | null;
    downtimeBreakdown: Array<{
        type: IssueType;
        downtimeSeconds: number;
    }> | null;
};

/**
 * Overview of the entire system, including ongoing issues and line summaries.
 */
export type SystemOverview = {
    /**
     * List of issues that are active right now.
     */
    issueIdsActiveNow: Array<string>;
    /**
     * List of issues that are active at some point today.
     */
    issueIdsActiveToday: Array<string>;
    /**
     * Summaries of all lines in the system.
     */
    lineSummaries: Array<LineSummary>;
};

/**
 * An entry in a chart, representing a data point with a name and associated payload.
 */
export type ChartEntry = {
    name: string;
    payload: {
        [key: string]: number;
    };
};

export type Granularity = 'day' | 'month' | 'year';

export type TimeScale = {
    granularity: Granularity;
    count: number;
};

/**
 * A chart that includes time scale information for both display and data granularity.
 */
export type TimeScaleChart = {
    title: string;
    data: Array<ChartEntry>;
    displayTimeScale?: TimeScale;
    dataTimeScale: TimeScale;
    /**
     * Cumulative data entries for the chart.
     */
    dataCumulative: Array<ChartEntry>;
};

/**
 * A chart containing a title and a list of data entries.
 */
export type Chart = {
    title: string;
    data: Array<ChartEntry>;
};

/**
 * System-level analytics, including various graphs and breakdowns.
 */
export type SystemAnalytics = {
    timeScaleChartsIssueCount: Array<TimeScaleChart>;
    timeScaleChartsIssueDuration: Array<TimeScaleChart>;
    chartTotalIssueCountByLine: Chart;
    chartTotalIssueCountByStation: Chart;
    issueIdsDisruptionLongest: Array<string>;
};

/**
 * A branch of a line, consisting of multiple stations.
 */
export type LineBranch = {
    id: string;
    title: string;
    titleTranslations: {
        [key: string]: string;
    };
    startedAt: string | null;
    endedAt: string | null;
    /**
     * List of station IDs in this branch, ordered by sequence.
     */
    stationIds: Array<string>;
};

/**
 * Profile of a line, including its details and status.
 */
export type LineProfile = {
    lineId: string;
    lineSummary: LineSummary;
    branches: Array<LineBranch>;
    /**
     * The next scheduled maintenance for the line, if any.
     */
    issueIdNextMaintenance: string | null;
    /**
     * List of recent issues affecting the line.
     */
    issueIdsRecent: Array<string>;
    issueCountByType: {
        [key in IssueType]?: number;
    };
    timeScaleGraphsIssueCount: Array<TimeScaleChart>;
    timeScaleGraphsUptimeRatios: Array<TimeScaleChart>;
    /**
     * List of station IDs that are interchanges on this line.
     */
    stationIdsInterchanges: Array<string>;
};

/**
 * A textual update for an issue
 */
export type IssueUpdate = {
    type: string;
    text: string;
    sourceUrl: string | null;
    createdAt: string;
};

/**
 * Station Profile
 */
export type StationProfile = {
    stationId: string;
    status: LineSummaryStatus;
    /**
     * List of recent issues affecting the station.
     */
    issueIdsRecent: Array<string>;
    issueCountByType: {
        [key in IssueType]?: number;
    };
};

export type GetOverviewData = {
    body?: never;
    path?: never;
    query?: {
        days?: number;
    };
    url: '/overview';
};

export type GetOverviewResponses = {
    /**
     * Successful overview response
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: SystemOverview;
    };
};

export type GetOverviewResponse = GetOverviewResponses[keyof GetOverviewResponses];

export type GetAnalyticsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/analytics';
};

export type GetAnalyticsResponses = {
    /**
     * Successful overview response
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: SystemAnalytics;
    };
};

export type GetAnalyticsResponse = GetAnalyticsResponses[keyof GetAnalyticsResponses];

export type GetLinesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/lines';
};

export type GetLinesResponses = {
    /**
     * Successful response
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: {
            lineIds: Array<string>;
        };
    };
};

export type GetLinesResponse = GetLinesResponses[keyof GetLinesResponses];

export type GetLinesLineIdProfileData = {
    body?: never;
    path: {
        lineId: string;
    };
    query?: {
        days?: number;
    };
    url: '/lines/{lineId}/profile';
};

export type GetLinesLineIdProfileErrors = {
    /**
     * Line not found
     */
    404: {
        success?: boolean;
        error?: string;
    };
};

export type GetLinesLineIdProfileError = GetLinesLineIdProfileErrors[keyof GetLinesLineIdProfileErrors];

export type GetLinesLineIdProfileResponses = {
    /**
     * Successful line profile response
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: LineProfile;
    };
};

export type GetLinesLineIdProfileResponse = GetLinesLineIdProfileResponses[keyof GetLinesLineIdProfileResponses];

export type GetIssuesData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/issues';
};

export type GetIssuesResponses = {
    /**
     * Successful response
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: {
            issueIds: Array<string>;
            monthEarliest: string;
            monthLatest: string;
        };
    };
};

export type GetIssuesResponse = GetIssuesResponses[keyof GetIssuesResponses];

export type GetIssuesHistoryYearData = {
    body?: never;
    path: {
        year: string;
    };
    query?: never;
    url: '/issues/history/{year}';
};

export type GetIssuesHistoryYearResponses = {
    /**
     * Issues for the specified year
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: {
            startAt: string;
            endAt: string;
            issuesByMonth: Array<{
                month: string;
                issueIds: Array<string>;
            }>;
        };
    };
};

export type GetIssuesHistoryYearResponse = GetIssuesHistoryYearResponses[keyof GetIssuesHistoryYearResponses];

export type GetIssuesHistoryYearSummaryData = {
    body?: never;
    path: {
        year: string;
    };
    query?: never;
    url: '/issues/history/{year}/summary';
};

export type GetIssuesHistoryYearSummaryResponses = {
    /**
     * Issue count summary by type for each month in the year
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: {
            startAt: string;
            endAt: string;
            summaryByMonth: Array<{
                month: string;
                issueCountsByType: {
                    [key in IssueType]?: number;
                };
                totalCount: number;
            }>;
        };
    };
};

export type GetIssuesHistoryYearSummaryResponse = GetIssuesHistoryYearSummaryResponses[keyof GetIssuesHistoryYearSummaryResponses];

export type GetIssuesHistoryYearMonthData = {
    body?: never;
    path: {
        year: string;
        month: string;
    };
    query?: never;
    url: '/issues/history/{year}/{month}';
};

export type GetIssuesHistoryYearMonthResponses = {
    /**
     * Issues for the specified month
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: {
            startAt: string;
            endAt: string;
            issuesByWeek: Array<{
                week: string;
                issueIds: Array<string>;
            }>;
        };
    };
};

export type GetIssuesHistoryYearMonthResponse = GetIssuesHistoryYearMonthResponses[keyof GetIssuesHistoryYearMonthResponses];

export type GetIssuesIssueIdData = {
    body?: never;
    path: {
        issueId: string;
    };
    query?: never;
    url: '/issues/{issueId}';
};

export type GetIssuesIssueIdErrors = {
    /**
     * Issue not found
     */
    404: {
        success?: boolean;
        error?: string;
    };
};

export type GetIssuesIssueIdError = GetIssuesIssueIdErrors[keyof GetIssuesIssueIdErrors];

export type GetIssuesIssueIdResponses = {
    /**
     * Successful response
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: {
            id: string;
            updates: Array<IssueUpdate>;
        };
    };
};

export type GetIssuesIssueIdResponse = GetIssuesIssueIdResponses[keyof GetIssuesIssueIdResponses];

export type GetStationsData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/stations';
};

export type GetStationsErrors = {
    /**
     * Station not found
     */
    404: {
        success?: boolean;
        error?: string;
    };
};

export type GetStationsError = GetStationsErrors[keyof GetStationsErrors];

export type GetStationsResponses = {
    /**
     * Successful response
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: {
            stationIds: Array<string>;
        };
    };
};

export type GetStationsResponse = GetStationsResponses[keyof GetStationsResponses];

export type GetStationsStationIdProfileData = {
    body?: never;
    path: {
        stationId: string;
    };
    query?: never;
    url: '/stations/{stationId}/profile';
};

export type GetStationsStationIdProfileErrors = {
    /**
     * Issue not found
     */
    404: {
        success?: boolean;
        error?: string;
    };
};

export type GetStationsStationIdProfileError = GetStationsStationIdProfileErrors[keyof GetStationsStationIdProfileErrors];

export type GetStationsStationIdProfileResponses = {
    /**
     * Successful response
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: StationProfile;
    };
};

export type GetStationsStationIdProfileResponse = GetStationsStationIdProfileResponses[keyof GetStationsStationIdProfileResponses];

export type GetMetadataData = {
    body?: never;
    path?: never;
    query?: never;
    url: '/metadata';
};

export type GetMetadataErrors = {
    /**
     * Not found
     */
    404: {
        success?: boolean;
        error?: string;
    };
};

export type GetMetadataError = GetMetadataErrors[keyof GetMetadataErrors];

export type GetMetadataResponses = {
    /**
     * Successful response
     */
    200: {
        success: true;
        included: IncludedEntities;
        data: Array<{
            key: string;
            value: string;
        }>;
    };
};

export type GetMetadataResponse = GetMetadataResponses[keyof GetMetadataResponses];

export type ClientOptions = {
    baseUrl: 'http://localhost:4000' | (string & {});
};